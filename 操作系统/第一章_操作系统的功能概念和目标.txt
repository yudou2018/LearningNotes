======================
1.1 操作系统的概念
======================
裸机-->操作系统-->应用程序、用户
操作系统负责：1. 管理协调硬件软件；2. 为上层应用程序提供简单服务；
3. 操作系统是最接近硬件的软件。
操作系统的角色：① 系统资源的管理者；②用户与硬件的接口；③ 对硬件机器的扩展。
联机命令：交互式的，输入一行立刻执行一行；
脱机命令：批处理，指令写在一起，输入一次后按顺序全部执行；


======================
1.2 操作系统的四个特征
======================
一、并发
两个或多个时间在同一时间间隔内发生，宏观上的同时，微观上的交替；
分时复用

二、共享
系统中资源在一个时间间隔内可供内存中多个并发的程序使用
1. 互斥共享：一个时间段内只有一个进程，例如QQ视频时，微信不能视频；
2. 同时共享：传输文件时，QQ、微信同时传送，但实际上还是并发交替进行，微观上是交替的
并行的例子如音响在变放音乐时边打游戏提供音效。

三、虚拟
物理上的实体变为若干逻辑上的对应物，如4GB内存通过空分复用的手段，能够运行要求超过
4GB的程序；依靠并发进行

四、异步
多道程序环境，多个程序并发进行，由于资源有限，程序是走走停停的，速度无法预知。

总结：并发性是其他三个性质的基础。


======================
1.3 操作系统的发展与分类
======================
一、手工操作阶段
手动打孔表示0和1，输入输出纸带，纸带机的传入传出速度限制了效率；
且用户独占全机；

二、单道批处理系统
操作系统的雏形。脱机输入输出磁带，此系统监督控制输入输出，速度比纸带快很多，缓解了一定的人机速度差异；
但内存中仅有一道程序运行，CPU利用率低；

三、多道批处理系统
操作系统诞生。每次输入多道程序，操作系统负责管理，程序并发进行，
但没有人机交互，只有最后能够直到程序运行结果，响应时间长。

四、分时操作系统
以时间片为单位，轮流为用户提供服务，用户请求可以立即被相应，人机交互。
但不能优先处理紧急任务。

五、实时操作系统
在分时操作系统的基础上，优先响应紧急任务。
硬实时：严格在规定时间内完成（军用系统、无人驾驶系统等）
软实时：偶尔允许违反规定时间（火车票购买系统、打印机系统等）
其他还有网络式操作系统，实现网络中资源共享，各计算机之间通信；
分布式操作系统，分布各计算机协同、并行完成分布的任务；
个人计算机系统如Windows MacOS等，便于个人使用。

======================
1.4 操作系统的运行机制和体系结构
======================
指令：C语言等代码翻译后成为机器语言指令，一条代码可以对应多条指令，
指令是让CPU执行某件事情的最简单指令。

指令分为特权指令，不允许用户程序使用；
非特权指令，普通的运算指令等。

CPU两种状态：用户态（目态）只能执行非特权指令；核心态（管态）可以执行特权和非特权指令。
PSW中的某标志位表示处于哪种状态。

内核程序：操作系统的管理者，可以执行特权指令，运行在核心态；
应用程序：只能执行非特权指令，运行于用户态。

操作系统内核：必须存在、最核心的功能，
底层软件，如①时钟管理、②中断处理、③原语（设备驱动、CPU切换等），
原语最接近硬件，运行具有原子性（要么不执行，要么一直执行到结束，不能中断）；
④进程管理、存储器管理、设备管理功能。
有的操作系统并不把④划分入内核功能。

操作系统的体系结构：
大内核：包含①②③④，高性能，内核代码量大，结构混乱，难维护；
微内核：只包含最基本功能，内核功能少，结构清晰，便于维护，但是需要在
核心态和用户态经常切换，性能低。
内核就相当于企业中的管理层。
创办公司时，管理层需要负责大部分功能，类似大内核；
企业壮大后，管理层只负责最核心的工作，结构清晰，但效率低；


======================
1.5 中断和异常
======================
一、中断机制的诞生
早期计算机程序串行执行，直到结束移出，独占系统资源，利用率低；
引入中断机制，意味着操作系统介入管理工作，实现多道程序并发执行；
例如CPU收到计时部件发送的中断信号，切换为核心态对中断进行处理。
发出IO完成中断信号，表示处理完成后回到用户态。

二、中断的概念和作用
1. 中断发生，CPU进入核心态；
2. 中断发生后，进程暂停，由操作系统进行中断处理；
3. 针对不同的中断信号，操作系统会进行不同的处理；
中断使得CPU切换用户态/核心态，获得计算机控制器开展管理工作，实现程序并发执行；
中断是使系统从用户态进入核心态的唯一途径，
核心态到用户态只需要特权指令改变PSW的标志位即可。

三、中断的分类
1. 内中断：也称异常、例外、陷入，与CPU内部和当前执行指令有关，来自CPU内部；
自愿中断（系统调用、陷入中断、trap指令），强迫中断（硬件故障如缺页、软件中断如整除0）
2. 外中断：与CPU无关，与当前执行指令无关，如IO发出的中断，来自CPU外部；

四、外中断的处理过程
1. 执行完每条指令后，CPU检查是否有外部中断信号
2. 如果有中断请求，则保护被中断进程的CPU环境（状态字PSW、计数器PC、通用寄存器）
3. 根据中断信号类型转入相应处理程序
4. 恢复原进程的CPU环境并退出中断，返回原来的程序往下执行

======================
1.6 系统调用
======================
一、什么是系统调用
操作系统与计算机硬件之间的接口包括命令接口与程序接口，
程序接口由一组系统调用组成。
系统调用就是给应用程序/编程人员使用的程序接口，供应程序调用的特殊函数。
作用：用户进程想要使用系统资源时，只能使用系统调用向操作系统请求服务，
例如请求打印，操作系统能够有效管理顺序，保证系统的稳定性和安全性，防止非法操作。
分类：设备管理、文件管理、进程管理、进程通信、内存管理；
核心态下才能完成特定指令。

二、系统调用与库函数
应用程序一般可以通过汇编语言直接调用系统功能；
但目前使用的C、C++等编程语言提供了库函数，常通过调用库函数的方式，
间接调用系统调用。
不涉及系统调用的库函数：取绝对值、加减乘除等，不需要进入核心态；
涉及系统调用的库函数：创建文件、读写文件等涉及共享资源的；

三、系统调用的背后
高级语言例如调用库函数write()函数编译后会形成汇编语言指令，
操作系统根据 int（interrupt）指令判断调用哪条指令；
1. 传入调用参数；2. 执行陷入指令；3. 执行相应服务程序；4. 返回用户程序。
陷入指令是在用户态执行，之后立即引发内中断，CPU进入核心态；
陷入指令是唯一一个 只能在用户态执行 而 不能在核心态执行的。

重点：系统调用会使CPU从用户态进入核心态。