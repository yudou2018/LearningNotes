------------------------------------------------ 2020 8 14 ---------------------------------------
基本操作指令
1. 第一个编译实例
touch helloWorld.cpp
vim helloWorld.cpp 进入开始编辑代码
完成后摁ESC后Shift+Z Z快捷保存
在目录下输入g++ helloWorld.cpp -o hlwd进行编译
输入 ./hlwd
成功运行

tree 可以看见当下目录的树状结构
.. 上一级
. 当前
只包含 . 和 .. 的目录称为空目录
rmdir 只能删除空目录
rm -r 递归删除 recursion 会询问是否进入xx xx 是否删除xx xx？
touch 创建空文件/修改文件的更新时间
cat helloWorld.cpp 在命令行打印出内容
less 带上下翻页查看文本内容
more  Shift+PgUp/PgDn上下翻页
rm -rf 强制删除
mv 移动
cp file1 ../ 拷贝文件到上一级
cp -r dir1 ../ 拷贝文件夹到上一级
cat 后等待标准输入 然后输出此内容
Ctrl+D 表示结束
head -5 helloWorld.cpp 显示头5行
tail -5 helloWorld.cpp 显示尾部5行

ln 创建链接：
硬链接与软链接（符号链接） 
ln -s helloWorld.cpp helloWorld_quick.cpp
后者是一个链接，类似快捷方式，占用内存极少 （类似C++的指针）
改变helloWorld.cpp后 进入helloWorld_quick.cpp 也看到修改
硬链接：多个文件名指向同一文件，大小会随着源文件变化。 （类似C++的引用）
ln helloWorld.cpp a.cpp 创建硬链接 不带 -s

wc word counter 
wc a.cpp  8行 17个单词 126个字符
wc -c 显示字节数
wc -l 显示行数
wc -w 显示字符数

od -tc file 显示ASCII码形式 可以看到隐藏字符\n
od -tcx file 以十六进制显示
od -tcd file 十进制
od -tco file 八进制
od --help 查看帮助

du 查看目录大小
du -hm 以mb为单位
不够一兆 向上取整
du -hb 以字节显示
du -hk 以k为单位

df 查看磁盘使用情况
df --block-size=GB 以GB显示使用情况
 --block-size=MB ...

whiami 查看当前用户
chmod 修改权限类 u(user), g(group), o(others), a(all)
chmod u+x file 使user对于file加上x权限 （文字设定法）
chmod 644 file (110 100 100对应的rwx(u) rwx(g) rwx(o))

chown yudou:root file 将file所有者改为yudou 所有组改为root
所有者与所有组未必有关系 但是必须存在于系统中 chown必须要超级用户能够使用
chown root:root aa -R 递归修改所有者(目录中所有文件)
chgrp 修改所有组
------------------------------------------------ 2020 8 14 ---------------------------------------

------------------------------------------------ 2020 8 15 ---------------------------------------
查找与检索
find /* -name "*.jpg" 从根目录查找以.jpg结尾的文件
find . -name 'file*' 查找文件名file 后面随意 默认递归查找

grep "hello" ./* -R 指定递归查找文件内包含hello内容的
-c 输出匹配行的计数
-I 不区分大小写
-h 查询文件时不显示文件名

安装和卸载
apt-get (仅限Ubuntu系统)
yum install w3m 安装w3m浏览器
参考https://mirrors.tuna.tsinghua.edu.cn/help/epel/
https://mirrors.tuna.tsinghua.edu.cn/help/centos/
将epel.repo中的mirrolist注释掉，且将baseurl取消注释修改为清华源 
而将CentOS-Base保留默认
成功后yum update更新所有软件和系统内核
阿里镜像
yum clean all 清除缓存
yum makecache 构建缓存
----- 失败-------

links官网下载压缩包安装links
tar zxvf links-2.21.tar.gz 解压links-2.21.tar.gz到当前目录
运行 ./configure 编译准备 看是否有文件缺失
make 软件编译
期间输入y回车确定安装了make工具
make install 完成安装
make clean 删除临时文件
cd /usr/local/bin 目录下可以看到安装的links

磁盘管理
mount  /dev/sdb1  test 把u盘绑定到test目录
fdisk -l 查看当前磁盘信息 看到/dev/sdb1
把/dev/sdb1挂载到可访问的目录下
mount /dev/sdb1 /mnt 随后访问cd /mnt可看到u盘内容
可以cp到u盘等操作
umount /mnt 卸载 后mnt中就没有内容了
被挂载的目录叫做挂载点

dd 拷贝iso9660标准光盘才可以
dd if=/dev/cdrom of=cdrom.iso
/dev/null 无底洞 可无限输出任何数据
dd if=test of=/dev/null 显示传输的文件大小、所用时间和速度
dd if=/dev/zero of=zeroTest.txt bs=1M count=1 初始化zeroTest.txt为1M大小 全0

压缩包管理
tar rar zip
c 创建，r 追加到末尾，t 列出内容，u更新文件，x 解压缩
tar gzip 或者 bzip2算法压缩、解压缩
tar cvf dir.tar dir 将dir打包为dir.tar 普通用户无法删除
tar xvf dir.tar dir 将dir.tar解压缩为dir目录
tar zcvf dir.tar.gz dir 用压缩算法gzip打包为dir.tar.gz所占内存少很多
tar jcvf app.tar.bz2 app 用压缩算法bzip2将app打包为app.tar.bz2
tar jxvf app.tar.bz2 -C test 用bzip2方法解压至test（test首先应该存在）

rar a -r (linux默认不存在)
zip -r app.zip app 压缩为app.zip

以上tar zcvf dir.tar.gz dir 所压缩效率减小内存最多


进程管理（任务管理器）
who 查看用户、终端号几点几分打开
ps 查看进程
ps aux a所有进程 x控制终端进程 内容非常多 PID进程号 CPU、内存使用比
ps ajx
ps -Lf 查看线程
jobs Ctrl+Z暂停 fg开始 多用几个cat可以用jobs看到不同的编号被停止
fg 1或2或3 选择恢复哪一个任务 切换到前台
用ctrl+c一个个关闭 直到jobs没有显示
bg 设置到后台但仍然在运行 可用jobs看到状态为Running
一次只有一个进程组在前台 ctrl z 放到后台暂停
前台剩下shell控制台
------------------------------------------------ 2020 8 15 ---------------------------------------

------------------------------------------------ 2020 8 17 ---------------------------------------

kill -l 查看信号 前32个是Unix经典信号 后32个是与硬件有关的实时信号
一般软件开发用前32 
SIGINT 就是ctrl C；  SIGKILL 结束进程； SIGSEGV 段错误 程序运行报错 比如往只读区里修改
对内存的非法操作
kill 进程序号 发送默认信号 SIGINT
kill -9 强制杀死

file /usr/bin/ls 可以查看ls操作的信息
file app 可以查看app文件的信息

echo &PATH 可以查看默认路径 ls就是在这些路径中 所以使用时不需要加路径
bin 目录

passwd yudou 修改yudou的密码 只有root有权限
su yudou 切换账号
su root 切换

命令行提示符
$ 表示是普通用户
# 表示是root用户

------------------------------------------------ 2020 8 17 ---------------------------------------